
Modules:
combine multiple assets intelligently (everything that the browser will download (js, imgs, etc))
basically is a bundler and a loader (bundler: puts all js fils together in one)


Node:
When requiring packages and libraries from node, the ./ syntax is used when requiring
local stuff, else you use the name
var fs = requre('fs');          ---> Global package
var calc = requre('./calc.js')  ---> Local package

fs: file manager Module
path: useful for path 

when using http module, the req and res variables are actually streams: constant
data flow.

Reguar expressions: https://regex101.com


Lodash:
JS node Library --> Helper utilities for working with arrays and objects (simple or complex)


NPM:
to start a project, first type npm init. this will ask questions about the project and create a
package.json file that describes the project and has some additional features (scripts)
when we use npm install --save it saves it to package.json dependencies, so
the source control dont save the node_modules. when we clone a repository, we dont have the
node_modules folder. to create it from the dependencies, we use npm install


BOWER:
like npm, but speciallized in front-end. it also has a bower.json file which describes the
dependencies and description of the project much like the package.json. bower init will create
this file and bower install will install the dependencies in the json file
to change where bower will install modules, we create a .bowerrc with
{
    "directory": "public/components"
}


SASS:
install sass through ruby gem, then use sass --watch ./ to tell sass to watch the current dir
for changes in .scss files and compile them automatically into .css files so we can use them in html.
To make a div occupy as much as it can, you should use the following properties
display: flex;
flex-direction: column;
.body{ flex-grow: 1; }
this will have the .body class use all available space between the header and the footer.
sometimes is best to create a .scss file with all the variables, then @import this file
in the other .scss files to use the variables.


SOURCE-MAPS:
tells the browser that the code he is running is pre-compiled code and it comes from other sources.
Using these maps is useful for debugging or finding individual styles through the developer tools
in chrome. when not using these maps, the browser will show the compiled .css file which is not
what we want to see. SASS does this automatically, less doesnt.
Its not only used in styles, but any transpiler (js to js, jade to html, etc)


MIXINS:
is a "function" that you declare, it takes parameters and sets some styles based on the values of
those parameters. is useful for not repeating the same css rules over and over again. for example
@mixin border-radius($value){
    border-top-left-radius: $value;
    border-top-right-radius: $value;
}
then, use it inside another scss rule and call it like a function
.btn{
    @include border-radius(10px);
}
and that will give the .btn class a border top-left and top-right radius of 10px;
When importing various other files, always import first the mixins first
a mixin can be declared with no parameters and it can still be used as a mixin
to avoid repeating code. for example
@mixin default-text{
    // ...properties
}


ECMA Script
group in charge of specification of modern js. the github page tells which new features are 
waiting for a another version or which ones are on early stages.
The site kangax.github.io/compat-table/es6 shows which features of ES6 are implemented on
which browsers/compilers and how many features.
- variables (let and const):
let: is var, but behaves good, for example you can't declare the same variable twice
let is a scope variable, which means it only exists in current func, if, while, etc.
it prevents suplicate declaration of variables, it prevents using a variable that has
not been declared yet, etc. Use let instead of var for every case.
const: exactly like let, except is a variable that cannot be redefined or reassigned.
however, const will let you reassign properties if const is an object.
const obj = {name: 'test'}
obj = 20        ---> INVALID
obj.name = 'hi' ---> VALID
- deconstruction:
extract values from objects or arrays in a compact way
const {roles} = person; ---> this means, take person object, take property 'roles' and
assign that property to a const named 'roles'
const roles = person.roles; would be the equivalent
it can also grab deeply nested object (object within another object) using another
desconstruction inside the deconstruction:
const person = {name:{first:'luc', last:'ver'}}
const {name: first, last} = person;
it also works in function parameters
function test(param1, {roles, {name: first, last}}){
    console.log(param1);
    console.log(roles);
    console.log([first, last]);
}
it can specify default variable value
const {title, length, description='Desc not found'} = getTrack();
- default parameters:
just like C#, we can use default parameters in js
function test(parm1, parm2='name', parm3={test: true}){...}
- object literals:
when constructing an object which will have the same property name as variable used
to assign the value, just use {name1, name2} --> {name1: name1, name2: name2}
when declaring an object that has a function as a property, no need to put the :function 
just use
const obj={
    firstName:'test',
    sayHello(){
        console.log(`hello, ${this.firstName}`)
    }
}
- classes:
very similar syntax to C#, Java, etc. it has a special method called constructor()
it can accept a parameter and do something. it can have properties (getter-setter syntax)
and static methods.
it can also use inheritance, using keyword extends, it enables to override methods,
add new methods, etc
- symbols:
a way to create private fields in classes. needs to include a polyfill.js script to
support in older browsers.
const _firstName = Symbol(),
    _lastName = Symbol()
class Person{
    get firstName(){return this._firstName}
    get lastName(){return this._lastName}

    constructor(firstName, lastName){
        this[_firstName] = firstName;
        this[_lastName] = lastName;
    }
}
- promises:
Very powerfull technique to handle async operations. it needs polyfill script
and its actually an api, not a new syntax. if the browser has implemented the promise
class, then it will use the native class, if not, it will use the polyfill class.
theres a way to nest promises so the done or fail callback is shared for various promises
the way to do this is using .then and returning another promise, so it gets chained
(view the js file)
the other way to do this is use Promise.all(promise1, promise2, ...).then(sucess, fail)
so the Promise.all will return a promise that only resolves after all the other promises
in the parameters are resolved


BABEL:
Takes modern ECMA 2015 js code and transpiles it into compatible code for legacy browsers
npm install babel --save-dev    ---> because it's used only in dev
npm install -g babel-cli        ---> to install babel globally, or instead of -g use --save-dev
the common usage is to create a folder named public, inside will be another folder named scripts.
The public folder contains everything that the server will be serving, and the scripts folder
will have the transpiled code (output from babel)
the scripts folder that is not within public will be source scripts, meaning uncompiled js.
then, you can set up a script to run in package.json that will take the scripts from one folder
and transpile them into another folder. for example:
"scripts":{
    "scripts": "babel scripts --source-maps-inline --out-dir public/scripts"
}
if we pass a --watch flag, babel will automatically transpile the js files in the folder
BUT, that is not enough, we need to tell babel which code we will be using so it can
transpile it accordingly. there are presets so the setup is already taken care of
to install a preset of ES2015:
npm install babel-preset-es2015 --save-dev
then, we tell babel to use this preset through a .babelrc file with
{
    "presets":[
        "es2015"
    ]
}
or better, it can be included in package.json file with the following syntax:
"babel":{
    "presets":[
        "es2015"
    ]
}



GULP:
task runner: simple program that runs tasks that we define
like in package.json in section 'scripts'. it is mainly
used for automating the babeling, the sass preprocessing,
concatenating and minifing the js files for prod folder.
to use it, install globally and then install locally. create
a file caled gulpfile.js with the tasks (see file for an example)
gulp runs on streams, so when defining a task, a callback func
can be specified and when called, it will end the task
the idea is to return a stream. useful commands: 
gulp.src
gulp.pipe
gulp.dest
gulp works on plugins (modular), so to do a babel transpile
we need to install gulp-babel, for sass we install gulp-sass
and so on.
for babel:
npm install gulp-babel --save-dev 
npm install babel-preset-es2015 --save-dev
then, on the pipeline, we type
.pipe(babel())
remember the .babelrc file to set the preset
and remember to install babel-core and babel-loader
to specify a babel on a matching criteria (for example, 
everything in a folder)
gulp.src('./src/scripts/**/*.js')
it means, grab all .js files in the specified directory
and in the subdirectories
- combine tasks:
the convention is that the default task should build the project
so, default should combine all the tasks. there's 2 ways to 
combine them. one after the other, or simultaneously
serial or parallel
gulp.task('default', gulp.parallel(task1, task2, ...))
gulp.task('default', gulp.series(task1, task2, ...))
try to use parallel to make use of async and multi-threading
(node philosophy). Series and parallel can be combined 
passing a parallel as a task for a series, for example
*NOTE series and parallel are features of gulp 4. if not available
try to install from github using
npm install "gulpjs/gulp.git#4.0" --save-dev
or look for the path at github.com
*FOR USE IN VERSION 3.9
use gulp.task('default', ['task1', 'task2', ...]);


STREAMS:
Node is async by nature, but this is because it relies heavily
on streams. There are 2 types, output and input streams.
the http-server that we created in node in the first sections
used the req, res variables; these are actually streams.
a stream is a flow of data, that is not sent all at once, but
in chunks


VINYL FS:
Stream framework used by gulp to create all tasks it uses. the 








